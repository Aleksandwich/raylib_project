"Low Poly Shrub - Small Texture" (https://skfb.ly/o7unT) by Natural_Disbuster is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Pine tree" (https://skfb.ly/6VKKJ) by Andriy Shekh is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Acacia tree" (https://skfb.ly/ouYrM) by evolveduk is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Low Poly Dead Tree" (https://skfb.ly/6AxPZ) by dvnc.tech is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Single Grass" (https://skfb.ly/X77o) by oppne is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Grass_green" (https://skfb.ly/onNMw) by nikitadyachik05 is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Stylized grass" (https://skfb.ly/osKKX) by Nicosama is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Low Poly Grass" (https://skfb.ly/onvVP) by Ruben Roseleth is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Oak tree" (https://skfb.ly/6VQwr) by massive-graphisme is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Acacia tree" (https://skfb.ly/ouYrM) by evolveduk is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

"Birch trees" (https://skfb.ly/6YuIO) by Igor_K. is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).

shader_type spatial;
render_mode cull_disabled;

uniform float wind_speed = 0.2;
uniform float wind_strength = 2.0;
uniform float wind_texture_tile_size = 20.0;
uniform float wind_vertical_strength = 0.3;
uniform vec2 wind_horizontal_direction = vec2(1.0, 0.5);
uniform bool toon = false; // Active ou désactive le mode toon
uniform int color_steps : hint_range(2, 8) = 4; // Niveaux de couleur pour l'effet toon
uniform float edge_thickness = 0.02; // Épaisseur des contours

uniform sampler2D wind_noise : hint_default_black;
uniform vec4 albedo : source_color;

// Paramètres de la lumière
uniform vec3 light_direction = vec3(0.0, -1.0, 0.0); // Direction de la lumière, par défaut vers le bas

void vertex() {
    vec3 world_vert = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz; // Conversion de l'espace modèle à l'espace monde

    // Direction du vent normalisée
    vec2 normalized_wind_direction = normalize(wind_horizontal_direction);

    // Génération de coordonnées UV pour la texture de bruit
    vec2 world_uv = world_vert.xz / wind_texture_tile_size + normalized_wind_direction * TIME * wind_speed;
    float displacement_affect = (1.0 - UV.y); // Influence du vent plus forte en haut de l'herbe

    // Intensité du vent basée sur la texture de bruit
    float wind_noise_intensity = (textureLod(wind_noise, world_uv, 0.0).r - 0.5);

    // Calcul de la direction du vent dans l'espace des vertices
    vec2 vert_space_horizontal_dir = (inverse(MODEL_MATRIX) * vec4(wind_horizontal_direction, 0.0, 0.0)).xy;
    vert_space_horizontal_dir = normalize(vert_space_horizontal_dir);

    // Effet de vent appliqué aux axes X et Z
    vec3 bump_wind = vec3(
        wind_noise_intensity * vert_space_horizontal_dir.x * wind_strength,
        (1.0 - wind_noise_intensity) * wind_vertical_strength,
        wind_noise_intensity * vert_space_horizontal_dir.y * wind_strength
    );

    // Appliquer le déplacement
    VERTEX += bump_wind * displacement_affect;
}

void fragment() {
	 vec3 normal = normalize(NORMAL); // Normal du fragment
    float light_intensity = max(dot(normal, normalize(light_direction)), 0.0);
    
    // Ajoute une couleur de contour
    vec3 outline_color = vec3(0.0, 0.0, 0.0); // Couleur du contour (noir)
    
    // Calcule l'épaisseur du contour
    float outline = smoothstep(0.5 - edge_thickness, 0.5, length(normal)); // Utilise la normale normalisée

    if (toon) {
        light_intensity = floor(light_intensity * float(color_steps)) / float(color_steps);
        ALBEDO = mix(outline_color, albedo.rgb * light_intensity, outline); // Mélange couleur de base et contour
    } else {
        ALBEDO = albedo.rgb; // Appliquer la couleur de base normalement
    }
    // Calcul de l'intensité lumineuse en fonction de la direction de la lumière
    //float light_intensity = max(dot(normal, normalize(light_direction)), 0.0);
    
    // Couleur de base de l'herbe avec ombrage basé sur l'intensité lumineuse
	
}
