cmake_minimum_required(VERSION 3.16)
project(ProjetTutore)

set(CMAKE_CXX_STANDARD 17)

# Collecter tous les fichiers .cpp dans src/ récursivement
file(GLOB_RECURSE SOURCES "src/*.cpp")

# Créer l'exécutable
add_executable(main ${SOURCES})

# Dossiers d'inclusion
target_include_directories(main PRIVATE 
    src
    include
)

# Configuration par plateforme (comme votre makefile)
if(WIN32)
    # Windows - liaison statique
    target_link_libraries(main 
        ${CMAKE_CURRENT_SOURCE_DIR}/lib/libraylib.a
        winmm
        gdi32
        opengl32
    )
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static -static-libgcc -static-libstdc++")
    target_compile_definitions(main PRIVATE PLATFORM_DESKTOP)
    
elseif(UNIX)
    # Linux - liaison dynamique avec raylib système
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(RAYLIB REQUIRED raylib)
    
    target_link_libraries(main 
        ${RAYLIB_LIBRARIES}
        GL
        m
        pthread
        dl
        rt
        X11
    )
    target_include_directories(main PRIVATE ${RAYLIB_INCLUDE_DIRS})
    target_compile_definitions(main PRIVATE PLATFORM_DESKTOP)
endif()

# Copier les ressources dans le build (optionnel - commentez si pas voulu)
# file(COPY assets models DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

# Alternative: définir le répertoire de travail pour certains IDEs
set_target_properties(main PROPERTIES
    VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)